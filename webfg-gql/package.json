{
  "name": "webfg-gql",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build:schema:qa": "DEPLOYMENT_ID=${DEPLOYMENT_ID:-none} && ID_SUFFIX=$(if [ \"$DEPLOYMENT_ID\" != \"none\" ]; then echo \"$DEPLOYMENT_ID\"; fi) && ENVIRONMENT=qa STACK_NAME=${npm_package_config_stack_name}-qa${ID_SUFFIX} node schema/buildSchema.js",
    "build:schema:prod": "ENVIRONMENT=prod STACK_NAME=${npm_package_config_stack_name} node schema/buildSchema.js",
    "deploy:qa": "DEPLOYMENT_ID=${DEPLOYMENT_ID:-none} && ID_SUFFIX=$(if [ \"$DEPLOYMENT_ID\" != \"none\" ]; then echo \"$DEPLOYMENT_ID\"; fi) && BUCKET_STACK_NAME=${npm_package_config_stack_name}-schema-qa${ID_SUFFIX} && MAIN_STACK_NAME=${npm_package_config_stack_name}-qa${ID_SUFFIX} && echo \"Deploying S3 Bucket Stack: ${BUCKET_STACK_NAME}...\" && sam deploy --template-file s3-bucket.yaml --stack-name ${BUCKET_STACK_NAME} --parameter-overrides Environment=qa ServiceName=${npm_package_config_stack_name} DeploymentId=${DEPLOYMENT_ID} --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset && BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${BUCKET_STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text) && if [ -z \"${BUCKET_NAME}\" ]; then echo \"Error: Failed to retrieve bucket name from stack ${BUCKET_STACK_NAME}\"; exit 1; fi && echo \"Bucket Name: ${BUCKET_NAME}\" && SCHEMA_S3_BUCKET=${BUCKET_NAME} npm run build:schema:qa || true && echo \"Building Main Stack: ${MAIN_STACK_NAME}...\" && sam build --cached --parallel && echo \"Deploying Main Stack: ${MAIN_STACK_NAME}...\" && sam deploy --template-file .aws-sam/build/template.yaml --stack-name ${MAIN_STACK_NAME} --parameter-overrides Environment=qa DeploymentId=${DEPLOYMENT_ID} SchemaS3Key=\"schemas/schema_${npm_package_config_qa_schema}.graphql\" SchemaS3BucketName=${BUCKET_NAME} --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND && echo \"Populating defaults for QA ${DEPLOYMENT_ID}...\" && node scripts/populateDefaults.js qa ${DEPLOYMENT_ID}",
    "deploy:prod": "BUCKET_STACK_NAME=${npm_package_config_stack_name}-schema && MAIN_STACK_NAME=${npm_package_config_stack_name} && echo \"Deploying S3 Bucket Stack: ${BUCKET_STACK_NAME}...\" && sam deploy --template-file s3-bucket.yaml --stack-name ${BUCKET_STACK_NAME} --parameter-overrides Environment=prod ServiceName=${npm_package_config_stack_name} DeploymentId=none --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset && BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${BUCKET_STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' --output text) && if [ -z \"${BUCKET_NAME}\" ]; then echo \"Error: Failed to retrieve bucket name from stack ${BUCKET_STACK_NAME}\"; exit 1; fi && echo \"Bucket Name: ${BUCKET_NAME}\" && SCHEMA_S3_BUCKET=${BUCKET_NAME} npm run build:schema:prod || true && echo \"Building Main Stack: ${MAIN_STACK_NAME}...\" && sam build --cached --parallel && echo \"Deploying Main Stack: ${MAIN_STACK_NAME}...\" && sam deploy --template-file .aws-sam/build/template.yaml --stack-name ${MAIN_STACK_NAME} --parameter-overrides Environment=prod DeploymentId=none SchemaS3Key=\"schemas/schema_${npm_package_config_prod_schema}.graphql\" SchemaS3BucketName=${BUCKET_NAME} --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND && echo \"Populating defaults for Prod...\" && node scripts/populateDefaults.js prod none",
    "check-deploy:qa": "DEPLOYMENT_ID=${DEPLOYMENT_ID:-none} && ID_SUFFIX=$(if [ \"$DEPLOYMENT_ID\" != \"none\" ]; then echo \"$DEPLOYMENT_ID\"; fi) && STACK_NAME=${npm_package_config_stack_name}-qa${ID_SUFFIX} && echo \"Checking status for stack: $STACK_NAME\" && STATUS=$(aws cloudformation describe-stack-events --stack-name $STACK_NAME --query \"StackEvents[?ResourceType=='AWS::CloudFormation::Stack' && LogicalResourceId=='$STACK_NAME']|[0].ResourceStatus\" --output text) && echo \"Stack Status: $STATUS\" && if [[ \"$STATUS\" == \"UPDATE_COMPLETE\" || \"$STATUS\" == \"CREATE_COMPLETE\" ]]; then echo \"✅ Deployment Succeeded\"; elif [[ \"$STATUS\" == *\"ROLLBACK\"* || \"$STATUS\" == *\"FAILED\"* ]]; then echo \"❌ Deployment Failed. Root causes:\" && aws cloudformation describe-stack-events --stack-name $STACK_NAME --max-items 25 --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId, ResourceStatusReason]' --output text; exit 1; else echo \"ℹ️ Stack status is inconclusive or still in progress: $STATUS\"; fi",
    "delete:qa": "DEPLOYMENT_ID=${DEPLOYMENT_ID:?DEPLOYMENT_ID is required} && ID_SUFFIX=$(if [ \"$DEPLOYMENT_ID\" != \"none\" ]; then echo \"$DEPLOYMENT_ID\"; fi) && BUCKET_STACK_NAME=${npm_package_config_stack_name}-schema-qa${ID_SUFFIX} && MAIN_STACK_NAME=${npm_package_config_stack_name}-qa${ID_SUFFIX} && echo \"Deleting Main Stack: ${MAIN_STACK_NAME}...\" && aws cloudformation delete-stack --stack-name ${MAIN_STACK_NAME} || echo \"Main stack ${MAIN_STACK_NAME} not found.\" && echo \"Waiting for main stack deletion...\" && aws cloudformation wait stack-delete-complete --stack-name ${MAIN_STACK_NAME} || echo \"Main stack wait failed.\" && echo \"Deleting S3 Bucket Stack: ${BUCKET_STACK_NAME}...\" && aws cloudformation delete-stack --stack-name ${BUCKET_STACK_NAME} || echo \"Bucket stack ${BUCKET_STACK_NAME} not found.\"",
    "delete:prod": "BUCKET_STACK_NAME=${npm_package_config_stack_name}-schema && MAIN_STACK_NAME=${npm_package_config_stack_name} && echo \"Deleting Main Stack: ${MAIN_STACK_NAME}...\" && aws cloudformation delete-stack --stack-name ${MAIN_STACK_NAME} || echo \"Main stack ${MAIN_STACK_NAME} not found.\" && echo \"Waiting for main stack deletion...\" && aws cloudformation wait stack-delete-complete --stack-name ${MAIN_STACK_NAME} || echo \"Main stack wait failed.\" && echo \"Deleting S3 Bucket Stack: ${BUCKET_STACK_NAME}...\" && aws cloudformation delete-stack --stack-name ${BUCKET_STACK_NAME} || echo \"Bucket stack ${BUCKET_STACK_NAME} not found.\""
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phnks/webfg-gql.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/phnks/webfg-gql/issues"
  },
  "homepage": "https://github.com/phnks/webfg-gql#readme",
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.758.0",
    "@aws-sdk/lib-dynamodb": "^3.758.0",
    "uuid": "^11.1.0"
  },
  "config": {
    "qa_schema": "v20",
    "prod_schema": "v11",
    "stack_name": "webfg-gql"
  }
}
