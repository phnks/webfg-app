type Query {
  # Character queries
  getCharacter(characterId: ID!): Character
  listCharacters(filter: CharacterFilterInput): [Character]
  # Enhanced character list query with search, filtering, sorting, and pagination
  listCharactersEnhanced(filter: EnhancedCharacterFilterInput): CharacterConnection

  # Object queries
  getObject(objectId: ID!): Object
  listObjects(filter: ObjectFilterInput): [Object]
  # Enhanced object list query with search, filtering, sorting, and pagination
  listObjectsEnhanced(filter: EnhancedObjectFilterInput): ObjectConnection

  # Action queries
  getAction(actionId: ID!): Action
  getActions(actionIds: [ID!]!): [Action]
  listActions(filter: ActionFilterInput): [Action]
  # Enhanced action list query with search, filtering, sorting, and pagination
  listActionsEnhanced(filter: EnhancedActionFilterInput): ActionConnection

  # Condition queries
  getCondition(conditionId: ID!): Condition
  getConditions(conditionIds: [ID!]!): [Condition]
  listConditions(filter: ConditionFilterInput): [Condition]
  # Enhanced condition list query with search, filtering, sorting, and pagination
  listConditionsEnhanced(filter: EnhancedConditionFilterInput): ConditionConnection

  # Encounter queries
  getEncounter(encounterId: ID!): Encounter
  listEncounters(filter: EncounterFilterInput): [Encounter]

  # Calculate action test without persisting
  calculateActionTest(input: ActionTestInput!): ActionTestResult!
}

type Mutation {
  # Character mutations
  createCharacter(input: CharacterInput!): Character
  updateCharacter(characterId: ID!, input: CharacterInput!): Character

  deleteCharacter(characterId: ID!): Character

  # Object mutations
  createObject(input: ObjectInput!): Object
  updateObject(objectId: ID!, input: ObjectInput!): Object
  deleteObject(objectId: ID!): Object

  # Action mutations
  createAction(input: ActionInput!): Action
  updateAction(actionId: ID!, input: ActionInput!): Action
  deleteAction(actionId: ID!): Action

  # Character-Object relationship mutations
  addObjectToStash(characterId: ID!, objectId: ID!): Character
  removeObjectFromStash(characterId: ID!, objectId: ID!): Character
  moveObjectToEquipment(characterId: ID!, objectId: ID!): Character
  moveObjectToReady(characterId: ID!, objectId: ID!): Character
  moveObjectFromReadyToEquipment(characterId: ID!, objectId: ID!): Character
  moveObjectFromEquipmentToStash(characterId: ID!, objectId: ID!): Character

  # Character-Action relationship mutations
  addActionToCharacter(characterId: ID!, actionId: ID!): Character
  removeActionFromCharacter(characterId: ID!, actionId: ID!): Character

  # Condition mutations
  createCondition(input: ConditionInput!): Condition
  updateCondition(conditionId: ID!, input: ConditionInput!): Condition
  deleteCondition(conditionId: ID!): Condition

  # Character-Condition relationship mutations
  addConditionToCharacter(characterId: ID!, conditionId: ID!, amount: Int): Character
  removeConditionFromCharacter(characterId: ID!, conditionId: ID!): Character
  updateConditionAmount(characterId: ID!, conditionId: ID!, amount: Int!): Character

  # Encounter mutations
  createEncounter(input: EncounterInput!): Encounter
  updateEncounter(encounterId: ID!, input: EncounterInput!): Encounter
  deleteEncounter(encounterId: ID!): Encounter
  updateGridSize(input: UpdateGridSizeInput!): Encounter!

  # Character-Encounter relationship mutations
  addCharacterToEncounter(encounterId: ID!, characterId: ID!, startTime: Float, x: Int, y: Int): Encounter
  removeCharacterFromEncounter(encounterId: ID!, characterId: ID!): Encounter
  
  # Encounter round and initiative mutations
  advanceRound(encounterId: ID!): Encounter
  advanceInitiative(encounterId: ID!): Encounter
  addEventToEncounter(encounterId: ID!, input: EncounterEventInput!): Encounter
  archiveCurrentEvents(encounterId: ID!, round: Int!, events: [EncounterEventInput]!): Encounter

  # Timeline and VTT mutations
  addActionToTimeline(encounterId: ID!, characterId: ID!, actionId: ID!, startTime: Float!): Encounter
  advanceEncounterTime(encounterId: ID!, newTime: Float!): Encounter
  updateCharacterPosition(encounterId: ID!, characterId: ID!, x: Int!, y: Int!): Encounter
  addGridElement(encounterId: ID!, element: GridElementInput!): Encounter
  removeGridElement(encounterId: ID!, elementId: ID!): Encounter

  # Object VTT Mutations
  addObjectToEncounterVTT(encounterId: ID!, objectId: ID!, x: Int!, y: Int!): Encounter
  updateObjectPosition(encounterId: ID!, objectId: ID!, x: Int!, y: Int!): Encounter
  removeObjectFromEncounterVTT(encounterId: ID!, objectId: ID!): Encounter

  # Terrain VTT Mutations
  addTerrainToEncounter(encounterId: ID!, input: TerrainElementInput!): Encounter
  updateTerrainPosition(encounterId: ID!, input: UpdateTerrainPositionInput!): Encounter
  removeTerrainFromEncounter(encounterId: ID!, terrainId: ID!): Encounter

}


type Subscription {
  # Character subscriptions
  onCreateCharacter: Character
      @aws_subscribe(mutations: ["createCharacter"])
  onUpdateCharacter: Character
      @aws_subscribe(mutations: ["updateCharacter"])
  onDeleteCharacter: Character
      @aws_subscribe(mutations: ["deleteCharacter"])

  # Object subscriptions
  onCreateObject: Object
      @aws_subscribe(mutations: ["createObject"])
  onUpdateObject: Object
      @aws_subscribe(mutations: ["updateObject"])
  onDeleteObject: Object
      @aws_subscribe(mutations: ["deleteObject"])

  # Action subscriptions
  onCreateAction: Action
      @aws_subscribe(mutations: ["createAction"])
  onUpdateAction: Action
      @aws_subscribe(mutations: ["updateAction"])
  onDeleteAction: Action
      @aws_subscribe(mutations: ["deleteAction"])

  # Condition subscriptions
  onCreateCondition: Condition
      @aws_subscribe(mutations: ["createCondition"])
  onUpdateCondition: Condition
      @aws_subscribe(mutations: ["updateCondition"])
  onDeleteCondition: Condition
      @aws_subscribe(mutations: ["deleteCondition"])

  # Encounter subscriptions
  onCreateEncounter: Encounter
      @aws_subscribe(mutations: ["createEncounter"])
  onUpdateEncounter: Encounter
      @aws_subscribe(mutations: ["updateEncounter"])
  onDeleteEncounter: Encounter
      @aws_subscribe(mutations: ["deleteEncounter"])
  onEncounterTimelineChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: ["addActionToTimeline", "advanceEncounterTime"])
  onEncounterEventChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: ["addEventToEncounter", "archiveCurrentEvents"])
  onEncounterRoundChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: ["advanceRound", "advanceInitiative"])
  onEncounterVttChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: [
        "updateCharacterPosition",
        "addGridElement",
        "removeGridElement",
        "addObjectToEncounterVTT",
        "updateObjectPosition",
        "removeObjectFromEncounterVTT",
        "addTerrainToEncounter",
        "updateTerrainPosition",
        "removeTerrainFromEncounter"
      ])
  onGridSizeChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: ["updateGridSize"])
  onEncounterCharacterChanged(encounterId: ID!): Encounter
      @aws_subscribe(mutations: ["addCharacterToEncounter", "removeCharacterFromEncounter"])
}

# Filter inputs for queries
input CharacterFilterInput {
  name: StringFilterInput
  # race: Race # Removed
  hasObjectWithName: StringFilterInput
  hasActionWithName: StringFilterInput
}

 input ActionFilterInput {
   name: StringFilterInput
   actionCategory: ActionCategory # Changed from 'type: ActionType'
 }

input ConditionFilterInput {
  name: StringFilterInput
  conditionType: ConditionType
  conditionTarget: AttributeName
}

input StringFilterInput {
  eq: String
  contains: String
  beginsWith: String
}

input ObjectFilterInput {
  name: StringFilterInput
  objectCategory: ObjectCategory
}

input EncounterFilterInput {
  name: StringFilterInput
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
