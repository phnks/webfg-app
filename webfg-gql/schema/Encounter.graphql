type Encounter {
  encounterId: ID!
  name: String!
  description: String
  currentTime: Float!
  characterPositions: [CharacterPosition]
  objectPositions: [ObjectPosition]
  characterTimelines: [CharacterTimeline]
  gridElements: [GridElement]
  terrainElements: [TerrainElement]
  history: [TimelineEvent]
  createdAt: String
  gridRows: Int!
  gridColumns: Int!
}

type CharacterPosition {
  characterId: ID!
  x: Int!
  y: Int!
}

type CharacterTimeline {
  characterId: ID!
  startTime: Float!
  actions: [ScheduledAction]
}

type ScheduledAction {
  actionId: ID!
  startTime: Float!
  endTime: Float!
}

type TimelineEvent {
  time: Float!
  type: TimelineEventType!
  characterId: ID
  actionId: ID
  description: String
  x: Int
  y: Int
  actionName: String
  stats: TimelineStats
  conditions: [String]
}

type TimelineStats {
  hitPoints: Int
  fatigue: Int
  exhaustion: Int
  surges: Int
}

enum TimelineEventType {
  CHARACTER_JOINED
  ACTION_STARTED
  ACTION_COMPLETED
  CHARACTER_MOVED
  GM_NOTE
}

type GridElement {
  id: ID!
  type: GridElementType!
  coordinates: [Coordinate]
  color: String
}

type Coordinate {
  x: Int!
  y: Int!
}

enum GridElementType {
  LINE
  SQUARE
  CIRCLE
  X_MARK
  V_MARK
}

type ObjectPosition {
  objectId: ID!
  x: Int!
  y: Int!
}

enum TerrainType {
  VERTICAL_LINE
  HORIZONTAL_LINE
  DIAGONAL_LINE
}

type TerrainElement {
  terrainId: ID!
  type: TerrainType!
  startX: Int!
  startY: Int!
  length: Int!
  color: String
}

input EncounterInput {
  name: String!
  description: String
}

input CharacterPositionInput {
  characterId: ID!
  x: Int!
  y: Int!
}

input GridElementInput {
  type: GridElementType!
  coordinates: [CoordinateInput]!
  color: String
}

input CoordinateInput {
  x: Int!
  y: Int!
}

input TimelineEventInput {
  time: Float!
  type: TimelineEventType!
  characterId: ID
  actionId: ID
  description: String
  x: Int
  y: Int
}

input UpdateGridSizeInput {
  encounterId: ID!
  rows: Int!
  columns: Int!
}

input TerrainElementInput {
  type: TerrainType!
  startX: Int!
  startY: Int!
  length: Int!
  color: String
}

input UpdateTerrainPositionInput {
  terrainId: ID!
  startX: Int!
  startY: Int!
}