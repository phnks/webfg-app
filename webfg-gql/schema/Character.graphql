# Type representing the stored value data
type StoredValueData {
  valueId: ID!
}

# Type representing the stored value data input
input StoredValueDataInput {
  valueId: ID!
}

# Type representing the stored attribute data
type StoredAttributeData {
  attributeId: ID!
  attributeValue: Int!
}

# Type representing the stored skill data
type StoredSkillData {
  skillId: ID!
  skillValue: Int!
}

type Character {
  characterId: ID!
  name: String!

  attributeData: [StoredAttributeData!]! # Use output type for stored data
  attributes: [CharacterAttribute]!      # Resolved data (Lambda)
  
  skillData: [StoredSkillData!]! # Use output type for stored data
  skills: [CharacterSkill!]!     # Resolved data (Lambda)

  stats: Stats!

  valueData: [StoredValueData!]! # Use output type for stored data
  values: [CharacterValue]!      # Resolved data (Lambda)

  conditionIds: [ID]
  conditions: [Trait]
  
  bodyId: [ID]!
  body: [Object]

  actionIds: [ID]
  actions: [Action]
  
  traitIds: [ID]
  traits: [Trait]
}

input CharacterSkillInput { # Should already be input, but double-checking
  skillId: ID!
  skillValue: Int!
}

type CharacterSkill {
  skillId: ID!
  skillValue: Int!
  skillName: SkillName!
  skillCategory: SkillCategory!
}

input CharacterAttributeInput { # Ensure this uses 'input' keyword
  attributeId: ID!
  attributeValue: Int!
}

type CharacterAttribute {
  attributeId: ID!
  attributeValue: Int!
  attributeName: AttributeName!
}

type CharacterValue {
  valueId: ID!
  valueName: ValueName!
}
