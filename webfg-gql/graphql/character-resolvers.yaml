AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersDataSourceName: 
    Type: String
    Description: 'Name of characters data source'
  SkillsTableName: 
    Type: String
    Description: 'Name of Skills table'
  AttributesTableName: 
    Type: String
    Description: 'Name of Attributes table'
  SkillsDataSourceName: 
    Type: String
    Description: 'Name of Skills DynamoDB data source'
  AttributesDataSourceName: 
    Type: String
    Description: 'Name of Attributes DynamoDB data source'
  AppSyncLambdaServiceRoleArn: 
    Type: String
    Description: 'Shared lambda service role'
  ValuesTableName: 
    Type: String
    Description: 'Name of Values table'
  CharactersTableName: 
    Type: String
    Description: 'Name of Characters table'

Resources:
  # --- Lambda Functions for Resolvers ---
  ResolveCharacterSkillsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterSkills.handler
      Runtime: nodejs20.x
      MemorySize: 1024 
      Timeout: 30
      Environment:
        Variables:
          SKILLS_TABLE: !Ref SkillsTableName
      Policies:
        - DynamoDBReadPolicy: 
            TableName: !Ref SkillsTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  ResolveCharacterAttributesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterAttributes.handler
      Runtime: nodejs20.x
      MemorySize: 1024 
      Timeout: 30
      Environment:
        Variables:
          ATTRIBUTES_TABLE: !Ref AttributesTableName
      Policies:
        - DynamoDBReadPolicy: 
            TableName: !Ref AttributesTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  ResolveCharacterValuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterValues.handler 
      Runtime: nodejs20.x
      MemorySize: 1024 
      Timeout: 30
      Environment:
        Variables:
          VALUES_TABLE: !Ref ValuesTableName 
      Policies:
        - DynamoDBReadPolicy: 
            TableName: !Ref ValuesTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  # --- Lambda Functions for Mutations ---
  CreateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/createCharacter.handler 
      Runtime: nodejs20.x 
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName 
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref CharactersTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  UpdateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/updateCharacter.handler 
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref CharactersTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  DeleteCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/deleteCharacter.handler 
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBCrudPolicy: 
            TableName: !Ref CharactersTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 

  # --- Data Sources for Lambda Resolvers ---
  ResolveCharacterSkillsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterSkillsLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt ResolveCharacterSkillsFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn 

  ResolveCharacterAttributesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterAttributesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt ResolveCharacterAttributesFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  ResolveCharacterValuesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterValuesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt ResolveCharacterValuesFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  # --- Data Sources for Lambda Mutations ---
  CreateCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: CreateCharacterLambdaSource 
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt CreateCharacterFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn 

  UpdateCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: UpdateCharacterLambdaSource 
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt UpdateCharacterFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  DeleteCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: DeleteCharacterLambdaSource 
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt DeleteCharacterFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  # --- Resolvers ---
  GetCharacterResolver: 
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": { "characterId": $util.dynamodb.toDynamoDBJson($ctx.args.characterId) }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  ListCharactersResolver: 
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'listCharacters'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if($ctx.args.filter)
            "filter": $util.transform.toDynamoDBFilterExpression($ctx.args.filter)
          #end
        }
      ResponseMappingTemplate: '$util.toJson($context.result.items)'

  CharacterSkillsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character 
      FieldName: skills 
      DataSourceName: ResolveCharacterSkillsLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": { "source": $util.toJson($ctx.source) }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 

  CharacterAttributesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character 
      FieldName: attributes 
      DataSourceName: ResolveCharacterAttributesLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": { "source": $util.toJson($ctx.source) }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 

  CharacterValuesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character 
      FieldName: values 
      DataSourceName: ResolveCharacterValuesLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": { "source": $util.toJson($ctx.source) }
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 

  ListSkillsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listSkills
      DataSourceName: !Ref SkillsDataSourceName
      RequestMappingTemplate: |
        { "version": "2017-02-28", "operation": "Scan" }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  ListAttributesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listAttributes
      DataSourceName: !Ref AttributesDataSourceName
      RequestMappingTemplate: |
        { "version": "2017-02-28", "operation": "Scan" }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  CreateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'createCharacter'
      DataSourceName: CreateCharacterLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx.arguments) 
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 

  UpdateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'updateCharacter'
      DataSourceName: UpdateCharacterLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx.arguments) 
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 

  DeleteCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'deleteCharacter'
      DataSourceName: DeleteCharacterLambdaSource 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx.arguments) 
        }
      ResponseMappingTemplate: '$util.toJson($ctx.result)' 
