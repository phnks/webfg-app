AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersDataSourceName:
    Type: String
    Description: 'Name of characters data source'
  SkillsTableName: # Add parameter
    Type: String
    Description: 'Name of Skills table'
  AttributesTableName: # Add parameter
    Type: String
    Description: 'Name of Attributes table'
  SkillsDataSourceName: # Add parameter
    Type: String
    Description: 'Name of Skills DynamoDB data source'
  AttributesDataSourceName: # Add parameter
    Type: String
    Description: 'Name of Attributes DynamoDB data source'
  AppSyncLambdaServiceRoleArn: # Add parameter
    Type: String
    Description: 'Shared lambda service role'
  ValuesTableName: # Add parameter
    Type: String
    Description: 'Name of Values table'

Resources:
  # --- Lambda Functions for Resolvers ---
  ResolveCharacterSkillsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterSkills.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          SKILLS_TABLE: !Ref SkillsTableName
      Policies:
        - DynamoDBReadPolicy: # Needs read access to SkillsTable
            TableName: !Ref SkillsTableName

  ResolveCharacterAttributesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterAttributes.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ATTRIBUTES_TABLE: !Ref AttributesTableName
      Policies:
        - DynamoDBReadPolicy: # Needs read access to AttributesTable
            TableName: !Ref AttributesTableName

  ResolveCharacterValuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterValues.handler # Assuming a new handler file
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          VALUES_TABLE: !Ref ValuesTableName # Assuming a new parameter and table
      Policies:
        - DynamoDBReadPolicy: # Needs read access to ValuesTable
            TableName: !Ref ValuesTableName

  # --- Data Sources for Lambda Resolvers ---
  ResolveCharacterSkillsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterSkillsLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterSkillsFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn # Role AppSync assumes to invoke Lambda

  ResolveCharacterAttributesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterAttributesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterAttributesFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  ResolveCharacterValuesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterValuesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterValuesFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  # --- Existing Resolvers ---
  GetCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "characterId": $util.dynamodb.toDynamoDBJson($ctx.args.characterId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  # Resolver for Character.skills field
  CharacterSkillsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character # Parent type
      FieldName: skills # Field being resolved
      DataSourceName: !GetAtt ResolveCharacterSkillsLambdaDataSource.Name
      # Simple pass-through request mapping for Lambda
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "source": $util.toJson($ctx.source)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  # Resolver for Character.attributes field
  CharacterAttributesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character # Parent type
      FieldName: attributes # Field being resolved
      DataSourceName: !GetAtt ResolveCharacterAttributesLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "source": $util.toJson($ctx.source)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  # Resolver for Character.values field
  CharacterValuesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character # Parent type
      FieldName: values # Field being resolved
      DataSourceName: !GetAtt ResolveCharacterValuesLambdaDataSource.Name
      # Simple pass-through request mapping for Lambda
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "source": $util.toJson($ctx.source)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  # --- Resolvers for Base Skills/Attributes ---
  ListSkillsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listSkills
      DataSourceName: !Ref SkillsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  ListAttributesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listAttributes
      DataSourceName: !Ref AttributesDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result.items)

  # --- Existing Character Resolvers ---

  ListCharactersResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'listCharacters'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if($ctx.args.filter)
            "filter": #set($filters = {})
              #if($ctx.args.filter.name)
                #if($ctx.args.filter.name.eq)
                  #set($filters.name = {"eq": $ctx.args.filter.name.eq})
                #end
                #if($ctx.args.filter.name.contains)
                  #set($filters.name = {"contains": $ctx.args.filter.name.contains})
                #end
                #if($ctx.args.filter.name.beginsWith)
                  #set($filters.name = {"beginsWith": $ctx.args.filter.name.beginsWith})
                #end
              #end
              ## Race filter removed
              #** #if($ctx.args.filter.race)
                #set($filters.race = {"eq": $ctx.args.filter.race})
              #end **#
              $util.toJson($filters)
          #end
        }
      ResponseMappingTemplate: '$util.toJson($context.result.items)'

  CreateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'createCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "characterId": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "characterId": $util.dynamodb.toDynamoDBJson($util.autoId()),
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name),
            ## race removed
            "attributeData": $util.dynamodb.toDynamoDBJson($ctx.args.attributeData), ## Use attributeData
            "skillData": $util.dynamodb.toDynamoDBJson($ctx.args.skillData), ## Use skillData
            "stats": $util.dynamodb.toDynamoDBJson($ctx.args.stats),
            "conditions": $util.dynamodb.toDynamoDBJson([]), ## Initialize conditions
            "actionIds": $util.dynamodb.toDynamoDBJson([]),    ## Initialize actionIds
            "traitIds": $util.dynamodb.toDynamoDBJson([])     ## Initialize traitIds
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  UpdateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'updateCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2018-05-29", ## Changed version
          "operation": "UpdateItem",
          "key": {
            "characterId": $util.dynamodb.toDynamoDBJson($ctx.args.characterId)
          },
          "update": {
            "expression": "SET #name = :name, #attributeData = :attributeData, #skillData = :skillData, #stats = :stats, #conditions = :conditions, #actionIds = :actionIds, #traitIds = :traitIds", ## Include all fields
            "expressionNames": {
              "#name": "name",
              "#attributeData": "attributeData",
              "#skillData": "skillData",
              "#stats": "stats",
              "#conditions": "conditions",
              "#actionIds": "actionIds",
              "#traitIds": "traitIds"
            },
            "expressionValues": {
              ":name": $util.dynamodb.toDynamoDBJson($ctx.args.name),
              ":attributeData": $util.dynamodb.toDynamoDBJson($ctx.args.attributeData),
              ":skillData": $util.dynamodb.toDynamoDBJson($ctx.args.skillData),
              ":stats": $util.dynamodb.toDynamoDBJson($ctx.args.stats),
              ":conditions": $util.dynamodb.toDynamoDBJson($ctx.args.conditions),
              ":actionIds": $util.dynamodb.toDynamoDBJson($ctx.args.actionIds),
              ":traitIds": $util.dynamodb.toDynamoDBJson($ctx.args.traitIds)
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  DeleteCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'deleteCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "characterId": $util.dynamodb.toDynamoDBJson($ctx.args.characterId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'
