AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersDataSourceName:
    Type: String
    Description: 'Name of characters data source'
  SkillsTableName: # Add parameter
    Type: String
    Description: 'Name of Skills table'
  AttributesTableName: # Add parameter
    Type: String
    Description: 'Name of Attributes table'
  SkillsDataSourceName: # Add parameter
    Type: String
    Description: 'Name of Skills DynamoDB data source'
  AttributesDataSourceName: # Add parameter
    Type: String
    Description: 'Name of Attributes DynamoDB data source'
  AppSyncLambdaServiceRoleArn: # Add parameter
    Type: String
    Description: 'Shared lambda service role'
  ValuesTableName: # Add parameter
    Type: String
    Description: 'Name of Values table'
  CharactersTableName: # Added missing parameter
    Type: String
    Description: 'Name of Characters table'


Resources:
  # --- Lambda Functions for Resolvers ---
  ResolveCharacterSkillsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterSkills.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          SKILLS_TABLE: !Ref SkillsTableName
      Policies:
        - DynamoDBReadPolicy: # Needs read access to SkillsTable
            TableName: !Ref SkillsTableName

  ResolveCharacterAttributesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterAttributes.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ATTRIBUTES_TABLE: !Ref AttributesTableName
      Policies:
        - DynamoDBReadPolicy: # Needs read access to AttributesTable
            TableName: !Ref AttributesTableName

  ResolveCharacterValuesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterValues.handler # Assuming a new handler file
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          VALUES_TABLE: !Ref ValuesTableName # Assuming a new parameter and table
      Policies:
        - DynamoDBReadPolicy: # Needs read access to ValuesTable
            TableName: !Ref ValuesTableName

  CreateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/createCharacter.handler # New handler file
      Runtime: nodejs20.x # Use consistent runtime
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName # Reference Characters table
      Policies:
        - DynamoDBWritePolicy: # Needs write access to CharactersTable
            TableName: !Ref CharactersTableName

  UpdateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/updateCharacter.handler # New handler file
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBWritePolicy: # Needs write access to CharactersTable
            TableName: !Ref CharactersTableName

  DeleteCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/deleteCharacter.handler # New handler file
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBWritePolicy: # Needs write access to CharactersTable
            TableName: !Ref CharactersTableName

  # --- Data Sources for Lambda Resolvers ---
  ResolveCharacterSkillsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterSkillsLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterSkillsFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn # Role AppSync assumes to invoke Lambda

  ResolveCharacterAttributesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterAttributesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterAttributesFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  ResolveCharacterValuesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterValuesLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterValuesFunction.Arn
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  CreateCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: CreateCharacterLambdaSource # Unique name
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt CreateCharacterFunction.Arn # Reference the new Lambda
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn # Use the shared Lambda role

  UpdateCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: UpdateCharacterLambdaSource # Unique name
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UpdateCharacterFunction.Arn # Reference the new Lambda
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  DeleteCharacterLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: DeleteCharacterLambdaSource # Unique name
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt DeleteCharacterFunction.Arn # Reference the new Lambda
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  # --- Existing Resolvers ---
  GetCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getCharacter'
      DataSourceName: !Ref CharactersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "characterId": $util.dynamodb.toDynamoDBJson($ctx.args.characterId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  CreateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'createCharacter'
      DataSourceName: !GetAtt CreateCharacterLambdaDataSource.Name # Use the new Lambda data source
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "arguments": $util.toJson($ctx.args), ## Pass arguments to Lambda
             "identity": $util.toJson($ctx.identity) ## Pass identity to Lambda
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $util.error.type)
        #end
        $util.toJson($ctx.result)

  UpdateCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'updateCharacter'
      DataSourceName: !GetAtt UpdateCharacterLambdaDataSource.Name # Use the new Lambda data source
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "arguments": $util.toJson($ctx.args), ## Pass arguments to Lambda
             "identity": $util.toJson($ctx.identity) ## Pass identity to Lambda
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $util.error.type)
        #end
        $util.toJson($ctx.result)

  DeleteCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'deleteCharacter'
      DataSourceName: !GetAtt DeleteCharacterLambdaDataSource.Name # Use the new Lambda data source
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
             "arguments": $util.toJson($ctx.args), ## Pass arguments to Lambda
             "identity": $util.toJson($ctx.identity) ## Pass identity to Lambda
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $util.error.type)
        #end
        $util.toJson($ctx.result)
