AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Action Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersTableName:
    Type: String
    Description: 'Name of characters table'
  ActionsTableName:
    Type: String
    Description: 'Name of actions table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'Shared lambda service role arn'

Resources:
  AddActionToCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/addActionToCharacter.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  GetCharacterActionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/getCharacterActions.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ACTIONS_TABLE: !Ref ActionsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActionsTableName

  RemoveActionFromCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/removeActionFromCharacter.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  AddActionToCharacterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AddActionToCharacter
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddActionToCharacterFunction.Arn
  
  GetCharacterActionsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: GetCharacterActions
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetCharacterActionsFunction.Arn

  RemoveActionFromCharacterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: RemoveActionFromCharacter
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt RemoveActionFromCharacterFunction.Arn

  AddActionToCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addActionToCharacter
      DataSourceName: !GetAtt AddActionToCharacterDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  GetCharacterActionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Character'
      FieldName: 'actions'
      DataSourceName: !GetAtt GetCharacterActionsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson({
            "source": $context.source
          })
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  RemoveActionFromCharacterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: removeActionFromCharacter
      DataSourceName: !GetAtt RemoveActionFromCharacterDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)