AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Action Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  ActionsDataSourceName:
    Type: String
    Description: 'Name of actions data source'
  ActionsTableName:
    Type: String
    Description: 'Name of actions table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'ARN of the AppSync Lambda service role'
  FormulasDataSourceName: # Add parameter for Formulas data source
    Type: String
    Description: 'Name of the Formulas DynamoDB data source'

Resources:
  GetActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getAction'
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  ListActionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'listActions'
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if($ctx.args.filter)
            "filter": #set($filters = {})
              #if($ctx.args.filter.name)
                #if($ctx.args.filter.name.eq)
                  #set($filters.name = {"eq": $ctx.args.filter.name.eq})
                #end
                #if($ctx.args.filter.name.contains)
                  #set($filters.name = {"contains": $ctx.args.filter.name.contains})
                #end
                #if($ctx.args.filter.name.beginsWith)
                   #set($filters.name = {"beginsWith": $ctx.args.filter.name.beginsWith})
                 #end
               #end
               #if($ctx.args.filter.actionCategory) ## Check for actionCategory instead of type
                 #set($filters.actionCategory = {"eq": $ctx.args.filter.actionCategory}) ## Set filter for actionCategory
               #end
               $util.toJson($filters)
           #end
        }
      ResponseMappingTemplate: '$util.toJson($context.result.items)'

  CreateActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: createAction
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        ## Automatically generate an ID if one is not provided
        #set($actionId = $util.autoId())
        
        ## Set up the DynamoDB operation
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($actionId)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
            "description": $util.dynamodb.toDynamoDBJson($ctx.args.input.description),
            "requiredStats": $util.dynamodb.toDynamoDBJson($ctx.args.input.requiredStats),
            "effects": $util.dynamodb.toDynamoDBJson($ctx.args.input.effects),
            "type": $util.dynamodb.toDynamoDBJson($ctx.args.input.type),
            "actionCategory": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionCategory),
            "initDurationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.initDurationId),
            "defaultInitDuration": $util.dynamodb.toDynamoDBJson($ctx.args.input.defaultInitDuration),
            "durationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.durationId),
            "defaultDuration": $util.dynamodb.toDynamoDBJson($ctx.args.input.defaultDuration),
            "fatigueCost": $util.dynamodb.toDynamoDBJson($ctx.args.input.fatigueCost),
            "difficultyClassId": $util.dynamodb.toDynamoDBJson($ctx.args.input.difficultyClassId),
            "guaranteedFormulaId": $util.dynamodb.toDynamoDBJson($ctx.args.input.guaranteedFormulaId),
            "units": $util.dynamodb.toDynamoDBJson($ctx.args.input.units),
            "actionTargets": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionTargets),
            "actionSources": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionSources),
            "actionEffects": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionEffects),
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  UpdateActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateAction
      DataSourceName: !Ref ActionsDataSourceName 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          },
          "update": {
            "expression": "SET #name = :name, #actionCategory = :actionCategory, #initDurationId = :initDurationId, #defaultInitDuration = :defaultInitDuration, #durationId = :durationId, #defaultDuration = :defaultDuration, #fatigueCost = :fatigueCost, #difficultyClassId = :difficultyClassId, #guaranteedFormulaId = :guaranteedFormulaId, #units = :units, #description = :description, #actionTargets = :actionTargets, #actionSources = :actionSources, #actionEffects = :actionEffects",
            "expressionNames": {
              "#name": "name",
              "#actionCategory": "actionCategory",
              "#initDurationId": "initDurationId",
              "#defaultInitDuration": "defaultInitDuration",
              "#durationId": "durationId",
              "#defaultDuration": "defaultDuration",
              "#fatigueCost": "fatigueCost",
              "#difficultyClassId": "difficultyClassId",
              "#guaranteedFormulaId": "guaranteedFormulaId",
              "#units": "units",
              "#description": "description",
              "#actionTargets": "actionTargets",
              "#actionSources": "actionSources",
              "#actionEffects": "actionEffects"
            },
            "expressionValues": {
              ":name": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
              ":actionCategory": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionCategory),
              ":initDurationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.initDurationId),
              ":defaultInitDuration": $util.dynamodb.toDynamoDBJson($ctx.args.input.defaultInitDuration),
              ":durationId": $util.dynamodb.toDynamoDBJson($ctx.args.input.durationId),
              ":defaultDuration": $util.dynamodb.toDynamoDBJson($ctx.args.input.defaultDuration),
              ":fatigueCost": $util.dynamodb.toDynamoDBJson($ctx.args.input.fatigueCost),
              ":difficultyClassId": $util.dynamodb.toDynamoDBJson($ctx.args.input.difficultyClassId),
              ":guaranteedFormulaId": $util.dynamodb.toDynamoDBJson($ctx.args.input.guaranteedFormulaId),
              ":units": $util.dynamodb.toDynamoDBJson($ctx.args.input.units),
              ":description": $util.dynamodb.toDynamoDBJson($ctx.args.input.description),
              ":actionTargets": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionTargets),
              ":actionSources": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionSources),
              ":actionEffects": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionEffects)
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ActionInitDurationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Action
      FieldName: initDuration
      DataSourceName: !Ref FormulasDataSourceName # Use Formulas data source
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "formulaId": $util.dynamodb.toDynamoDBJson($ctx.source.initDurationId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ActionDurationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Action
      FieldName: duration
      DataSourceName: !Ref FormulasDataSourceName # Use Formulas data source
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "formulaId": $util.dynamodb.toDynamoDBJson($ctx.source.durationId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ActionDifficultyClassResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Action
      FieldName: difficultyClass
      DataSourceName: !Ref FormulasDataSourceName # Use Formulas data source
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "formulaId": $util.dynamodb.toDynamoDBJson($ctx.source.difficultyClassId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ActionGuaranteedFormulaResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Action
      FieldName: guaranteedFormula
      DataSourceName: !Ref FormulasDataSourceName # Use Formulas data source
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "formulaId": $util.dynamodb.toDynamoDBJson($ctx.source.guaranteedFormulaId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  DeleteActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteAction
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  GetActionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/ # Corrected CodeUri
      Handler: getActions.handler # Corrected Handler path relative to CodeUri
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ACTIONS_TABLE: !Ref ActionsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActionsTableName

  GetActionsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: GetActions
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetActionsFunction.Arn

  GetActionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getActions'
      DataSourceName: !GetAtt GetActionsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
