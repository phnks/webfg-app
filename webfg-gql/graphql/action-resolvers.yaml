AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Action Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  ActionsDataSourceName:
    Type: String
    Description: 'Name of actions data source'
  ActionsTableName:
    Type: String
    Description: 'Name of actions table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'ARN of the AppSync Lambda service role'

Resources:
  # Enhanced Actions List Function
  ListActionsEnhancedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/listActionsEnhanced.handler
      Runtime: nodejs20.x
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ACTIONS_TABLE_NAME: !Ref ActionsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActionsTableName
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Enhanced Actions List Data Source
  ListActionsEnhancedLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ListActionsEnhancedLambdaSource
      Type: AWS_LAMBDA
      LambdaConfig: { LambdaFunctionArn: !GetAtt ListActionsEnhancedFunction.Arn }
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn

  GetActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getAction'
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  ListActionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'listActions'
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if($ctx.args.filter)
            "filter": #set($filters = {})
              #if($ctx.args.filter.name)
                #if($ctx.args.filter.name.eq)
                  #set($filters.name = {"eq": $ctx.args.filter.name.eq})
                #end
                #if($ctx.args.filter.name.contains)
                  #set($filters.name = {"contains": $ctx.args.filter.name.contains})
                #end
                #if($ctx.args.filter.name.beginsWith)
                   #set($filters.name = {"beginsWith": $ctx.args.filter.name.beginsWith})
                 #end
               #end
               #if($ctx.args.filter.actionCategory) ## Check for actionCategory instead of type
                 #set($filters.actionCategory = {"eq": $ctx.args.filter.actionCategory}) ## Set filter for actionCategory
               #end
               $util.toJson($filters)
           #end
        }
      ResponseMappingTemplate: '$util.toJson($context.result.items)'

  ListActionsEnhancedResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: ListActionsEnhancedLambdaDataSource
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'listActionsEnhanced'
      DataSourceName: !GetAtt ListActionsEnhancedLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($context.arguments)
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  CreateActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: createAction
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        ## Automatically generate an ID if one is not provided
        #set($actionId = $util.autoId())
        
        ## Set up the DynamoDB operation
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($actionId)
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
            "description": $util.dynamodb.toDynamoDBJson($ctx.args.input.description),
            "actionCategory": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionCategory),
            "sourceAttribute": $util.dynamodb.toDynamoDBJson($ctx.args.input.sourceAttribute),
            "targetAttribute": $util.dynamodb.toDynamoDBJson($ctx.args.input.targetAttribute),
            "targetType": $util.dynamodb.toDynamoDBJson($ctx.args.input.targetType),
            "effectType": $util.dynamodb.toDynamoDBJson($ctx.args.input.effectType),
            #if($ctx.args.input.triggeredActionId)
              "triggeredActionId": $util.dynamodb.toDynamoDBJson($ctx.args.input.triggeredActionId),
            #end
            #if($ctx.args.input.objectUsage)
              "objectUsage": $util.dynamodb.toDynamoDBJson($ctx.args.input.objectUsage),
            #end
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  UpdateActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateAction
      DataSourceName: !Ref ActionsDataSourceName 
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          },
          "update": {
            "expression": "SET #name = :name, #actionCategory = :actionCategory, #sourceAttribute = :sourceAttribute, #targetAttribute = :targetAttribute, #description = :description, #targetType = :targetType, #effectType = :effectType#if($ctx.args.input.triggeredActionId), #triggeredActionId = :triggeredActionId#end#if($ctx.args.input.objectUsage), #objectUsage = :objectUsage#end",
            "expressionNames": {
              "#name": "name",
              "#actionCategory": "actionCategory",
              "#sourceAttribute": "sourceAttribute",
              "#targetAttribute": "targetAttribute",
              "#description": "description",
              "#targetType": "targetType",
              "#effectType": "effectType"#if($ctx.args.input.triggeredActionId),
              "#triggeredActionId": "triggeredActionId"#end#if($ctx.args.input.objectUsage),
              "#objectUsage": "objectUsage"#end
            },
            "expressionValues": {
              ":name": $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
              ":actionCategory": $util.dynamodb.toDynamoDBJson($ctx.args.input.actionCategory),
              ":sourceAttribute": $util.dynamodb.toDynamoDBJson($ctx.args.input.sourceAttribute),
              ":targetAttribute": $util.dynamodb.toDynamoDBJson($ctx.args.input.targetAttribute),
              ":description": $util.dynamodb.toDynamoDBJson($ctx.args.input.description),
              ":targetType": $util.dynamodb.toDynamoDBJson($ctx.args.input.targetType),
              ":effectType": $util.dynamodb.toDynamoDBJson($ctx.args.input.effectType)#if($ctx.args.input.triggeredActionId),
              ":triggeredActionId": $util.dynamodb.toDynamoDBJson($ctx.args.input.triggeredActionId)#end#if($ctx.args.input.objectUsage),
              ":objectUsage": $util.dynamodb.toDynamoDBJson($ctx.args.input.objectUsage)#end
            }
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)


  DeleteActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteAction
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "DeleteItem",
          "key": {
            "actionId": $util.dynamodb.toDynamoDBJson($ctx.args.actionId)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  TriggeredActionResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Action
      FieldName: triggeredAction
      DataSourceName: !Ref ActionsDataSourceName
      RequestMappingTemplate: |
        #if($ctx.source.triggeredActionId)
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "actionId": $util.dynamodb.toDynamoDBJson($ctx.source.triggeredActionId)
            }
          }
        #else
          {
            "version": "2017-02-28",
            "operation": "GetItem",
            "key": {
              "actionId": {"S": "non-existent"}
            }
          }
        #end
      ResponseMappingTemplate: |
        #if($ctx.result)
          $util.toJson($ctx.result)
        #else
          null
        #end

  GetActionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/ # Corrected CodeUri
      Handler: getActions.handler # Corrected Handler path relative to CodeUri
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ACTIONS_TABLE: !Ref ActionsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ActionsTableName

  GetActionsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: GetActions
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetActionsFunction.Arn

  GetActionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Query'
      FieldName: 'getActions'
      DataSourceName: !GetAtt GetActionsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
