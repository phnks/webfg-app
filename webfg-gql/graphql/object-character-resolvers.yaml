AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Object Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersTableName:
    Type: String
    Description: 'Name of characters table'
  ObjectsTableName:
    Type: String
    Description: 'Name of objects table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'Shared lambda service role'

Resources:
  # New stash management functions
  AddObjectToStashFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/addObjectToStash.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName
  
  RemoveObjectFromStashFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/removeObjectFromStash.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName
  
  # New movement functions
  MoveObjectToEquipmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/moveObjectToEquipment.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName
  
  MoveObjectToReadyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/moveObjectToReady.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  MoveObjectFromReadyToEquipmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/moveObjectFromReadyToEquipment.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  MoveObjectFromEquipmentToStashFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/moveObjectFromEquipmentToStash.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  # Inventory quantity management functions
  UpdateInventoryQuantityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/updateInventoryQuantity.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  MoveInventoryItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/moveInventoryItem.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  # Data sources for new functions
  AddObjectToStashDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AddObjectToStash
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddObjectToStashFunction.Arn

  RemoveObjectFromStashDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: RemoveObjectFromStash
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt RemoveObjectFromStashFunction.Arn
  
  MoveObjectToEquipmentDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: MoveObjectToEquipment
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MoveObjectToEquipmentFunction.Arn
  
  MoveObjectToReadyDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: MoveObjectToReady
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MoveObjectToReadyFunction.Arn

  MoveObjectFromReadyToEquipmentDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: MoveObjectFromReadyToEquipment
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MoveObjectFromReadyToEquipmentFunction.Arn

  MoveObjectFromEquipmentToStashDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: MoveObjectFromEquipmentToStash
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MoveObjectFromEquipmentToStashFunction.Arn

  # Data sources for inventory quantity functions
  UpdateInventoryQuantityDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: UpdateInventoryQuantity
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UpdateInventoryQuantityFunction.Arn

  MoveInventoryItemDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: MoveInventoryItem
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MoveInventoryItemFunction.Arn

  # Resolvers for new mutations
  AddObjectToStashResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addObjectToStash
      DataSourceName: !GetAtt AddObjectToStashDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  RemoveObjectFromStashResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: removeObjectFromStash
      DataSourceName: !GetAtt RemoveObjectFromStashDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  MoveObjectToEquipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: moveObjectToEquipment
      DataSourceName: !GetAtt MoveObjectToEquipmentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  
  MoveObjectToReadyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: moveObjectToReady
      DataSourceName: !GetAtt MoveObjectToReadyDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MoveObjectFromReadyToEquipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: moveObjectFromReadyToEquipment
      DataSourceName: !GetAtt MoveObjectFromReadyToEquipmentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MoveObjectFromEquipmentToStashResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: moveObjectFromEquipmentToStash
      DataSourceName: !GetAtt MoveObjectFromEquipmentToStashDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Inventory quantity mutation resolvers
  UpdateInventoryQuantityResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateInventoryQuantity
      DataSourceName: !GetAtt UpdateInventoryQuantityDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  MoveInventoryItemResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: moveInventoryItem
      DataSourceName: !GetAtt MoveInventoryItemDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Character object resolvers
  ResolveCharacterObjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterObjects.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          OBJECTS_TABLE: !Ref ObjectsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ObjectsTableName

  # Inventory items resolver function
  ResolveCharacterInventoryItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/resolveCharacterInventoryItems.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          OBJECTS_TABLE: !Ref ObjectsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ObjectsTableName

  ResolveCharacterObjectsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterObjects
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterObjectsFunction.Arn

  ResolveCharacterInventoryItemsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ResolveCharacterInventoryItems
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ResolveCharacterInventoryItemsFunction.Arn

  CharacterStashResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character
      FieldName: stash
      DataSourceName: !GetAtt ResolveCharacterObjectsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "stash",
            "source": $util.toJson($context.source)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  CharacterEquipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character
      FieldName: equipment
      DataSourceName: !GetAtt ResolveCharacterObjectsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "equipment",
            "source": $util.toJson($context.source)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  CharacterReadyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character
      FieldName: ready
      DataSourceName: !GetAtt ResolveCharacterObjectsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "ready",
            "source": $util.toJson($context.source)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  CharacterInventoryItemsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Character
      FieldName: inventoryItems
      DataSourceName: !GetAtt ResolveCharacterInventoryItemsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "source": $util.toJson($context.source),
            "arguments": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)