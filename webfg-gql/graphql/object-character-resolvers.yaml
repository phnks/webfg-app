AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Action Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  CharactersTableName:
    Type: String
    Description: 'Name of characters table'
  ObjectsTableName:
    Type: String
    Description: 'Name of objects table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'Shared lambda service role'

Resources:
  AddObjectToInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/addObjectToInventory.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref CharactersTableName

  GetCharacterInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/getCharacterInventory.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          OBJECTS_TABLE: !Ref ObjectsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ObjectsTableName

  GetCharacterEquipmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/getCharacterEquipment.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          OBJECTS_TABLE: !Ref ObjectsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ObjectsTableName

  AddObjectToInventoryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AddObjectToInventory
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddObjectToInventoryFunction.Arn
  
  GetCharacterInventoryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: GetCharacterInventory
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetCharacterInventoryFunction.Arn

  GetCharacterEquipmentDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: GetCharacterEquipment
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetCharacterEquipmentFunction.Arn

  AddObjectToInventoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addObjectToInventory
      DataSourceName: !GetAtt AddObjectToInventoryDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  GetCharacterInventoryResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Character'
      FieldName: 'inventory'
      DataSourceName: !GetAtt GetCharacterInventoryDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "source": $util.toJson($context.source)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  GetCharacterEquipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Character'
      FieldName: 'equipment'
      DataSourceName: !GetAtt GetCharacterEquipmentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "source": $util.toJson($context.source)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)