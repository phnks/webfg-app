AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Encounter Character Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  EncountersTableName:
    Type: String
    Description: 'Name of encounters table'
  CharactersTableName:
    Type: String
    Description: 'Name of characters table'
  ActionsTableName:
    Type: String
    Description: 'Name of actions table'
  AppSyncLambdaServiceRoleArn:
    Type: String
    Description: 'Shared lambda service role'

Resources:
  AddCharacterToEncounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/addCharacterToEncounter.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName

  RemoveCharacterFromEncounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/removeCharacterFromEncounter.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
          CHARACTERS_TABLE: !Ref CharactersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName

  AddEventToEncounterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/addEventToEncounter.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
          CHARACTERS_TABLE: !Ref CharactersTableName
          ACTIONS_TABLE: !Ref ActionsTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref CharactersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref ActionsTableName

  ArchiveCurrentEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/archiveCurrentEvents.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName

  AdvanceRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/advanceRound.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName

  AdvanceInitiativeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../
      Handler: ./functions/advanceInitiative.handler
      Runtime: nodejs22.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          ENCOUNTERS_TABLE: !Ref EncountersTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EncountersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref EncountersTableName

  # Data sources for Lambda functions
  AddCharacterToEncounterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AddCharacterToEncounter
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddCharacterToEncounterFunction.Arn
  
  RemoveCharacterFromEncounterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: RemoveCharacterFromEncounter
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt RemoveCharacterFromEncounterFunction.Arn

  AddEventToEncounterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AddEventToEncounter
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AddEventToEncounterFunction.Arn

  ArchiveCurrentEventsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ArchiveCurrentEvents
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ArchiveCurrentEventsFunction.Arn

  AdvanceRoundDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AdvanceRound
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AdvanceRoundFunction.Arn
  
  AdvanceInitiativeDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: AdvanceInitiative
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref AppSyncLambdaServiceRoleArn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AdvanceInitiativeFunction.Arn

  # Resolvers
  AddCharacterToEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addCharacterToEncounter
      DataSourceName: !GetAtt AddCharacterToEncounterDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  RemoveCharacterFromEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: removeCharacterFromEncounter
      DataSourceName: !GetAtt RemoveCharacterFromEncounterDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AddEventToEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addEventToEncounter
      DataSourceName: !GetAtt AddEventToEncounterDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  ArchiveCurrentEventsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: archiveCurrentEvents
      DataSourceName: !GetAtt ArchiveCurrentEventsDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AdvanceRoundResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: advanceRound
      DataSourceName: !GetAtt AdvanceRoundDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  AdvanceInitiativeResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: advanceInitiative
      DataSourceName: !GetAtt AdvanceInitiativeDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($ctx.args)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)