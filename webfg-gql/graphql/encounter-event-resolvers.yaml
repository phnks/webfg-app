AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'AppSync Encounter Event Resolvers'

Parameters:
  ApiId:
    Type: String
    Description: 'AppSync GraphQL API ID'
  EncountersDataSourceName:
    Type: String
    Description: 'Name of encounters data source'

Resources:
  AdvanceRoundResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'advanceRound'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET round = round + :one, initiative = :startInitiative, eventsCurrent = :emptyList",
            "expressionValues": {
              ":one": $util.dynamodb.toDynamoDBJson(1),
              ":startInitiative": $util.dynamodb.toDynamoDBJson(1),
              ":emptyList": $util.dynamodb.toDynamoDBJson([])
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  AdvanceInitiativeResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'advanceInitiative'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET initiative = initiative + :one",
            "expressionValues": {
              ":one": $util.dynamodb.toDynamoDBJson(1)
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  AddEventToEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'addEventToEncounter'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        #set($event = {
          "initiative": $ctx.args.input.initiative,
          "type": $ctx.args.input.type,
          "characterId": $ctx.args.input.characterId,
          "actionId": $ctx.args.input.actionId,
          "description": $ctx.args.input.description
        })
        
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET eventsCurrent = list_append(if_not_exists(eventsCurrent, :emptyList), :newEvent)",
            "expressionValues": {
              ":emptyList": $util.dynamodb.toDynamoDBJson([]),
              ":newEvent": $util.dynamodb.toDynamoDBJson([$event])
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  AddCharacterToEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'addCharacterToEncounter'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        #set($event = {
          "initiative": $ctx.args.initiative,
          "type": "CHARACTER_ADDED",
          "characterId": $ctx.args.characterId,
          "actionId": null,
          "description": "Character added to encounter"
        })
        
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET eventsCurrent = list_append(if_not_exists(eventsCurrent, :emptyList), :newEvent)",
            "expressionValues": {
              ":emptyList": $util.dynamodb.toDynamoDBJson([]),
              ":newEvent": $util.dynamodb.toDynamoDBJson([$event])
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  RemoveCharacterFromEncounterResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'removeCharacterFromEncounter'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        #set($event = {
          "initiative": $ctx.args.initiative,
          "type": "CHARACTER_REMOVED",
          "characterId": $ctx.args.characterId,
          "actionId": null,
          "description": "Character removed from encounter"
        })
        
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET eventsCurrent = list_append(if_not_exists(eventsCurrent, :emptyList), :newEvent)",
            "expressionValues": {
              ":emptyList": $util.dynamodb.toDynamoDBJson([]),
              ":newEvent": $util.dynamodb.toDynamoDBJson([$event])
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'

  ArchiveCurrentEventsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: 'Mutation'
      FieldName: 'archiveCurrentEvents'
      DataSourceName: !Ref EncountersDataSourceName
      RequestMappingTemplate: |
        #set($eventLog = {
          "round": $ctx.args.round,
          "events": $ctx.args.events
        })
        
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "encounterId": $util.dynamodb.toDynamoDBJson($ctx.args.encounterId)
          },
          "update": {
            "expression": "SET eventsHistory = list_append(if_not_exists(eventsHistory, :emptyList), :newEventLog), eventsCurrent = :emptyList",
            "expressionValues": {
              ":emptyList": $util.dynamodb.toDynamoDBJson([]),
              ":newEventLog": $util.dynamodb.toDynamoDBJson([$eventLog])
            }
          }
        }
      ResponseMappingTemplate: '$util.toJson($context.result)'