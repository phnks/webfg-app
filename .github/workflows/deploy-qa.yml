name: Deploy QA Environment per PR

on:
  pull_request:
    types: [opened, synchronize, reopened] # Trigger on PR creation/update
  workflow_dispatch: # Allow manual trigger

jobs:
  test-gql-unit:
    name: Run GQL Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webfg-gql
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install GQL dependencies
        run: npm install

      - name: Run GQL unit tests with coverage
        run: npm run test:coverage

  test-gm-app-unit:
    name: Run GM App Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webfg-gm-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install GM App dependencies
        run: npm install

      - name: Run GM App unit tests with coverage
        run: npm run test:ci

  test-player-app-unit:
    name: Run Player App Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webfg-player-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Player App dependencies
        run: npm install

      - name: Run Player App unit tests with coverage
        run: npm run test:ci

  deploy-gql-qa:
    name: Deploy GQL to QA (PR-${{ github.event.number }})
    runs-on: ubuntu-latest
    needs: test-gql-unit # Wait for GQL unit tests to pass
    defaults:
      run:
        working-directory: ./webfg-gql
    env:
      DEPLOYMENT_ID: ${{ github.event.number }} # Use PR number as Deployment ID
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
        working-directory: . # Run at root

      - name: Install GQL dependencies
        run: npm install

      - name: Deploy GQL QA Stack (PR-${{ env.DEPLOYMENT_ID }})
        id: deploy_gql
        run: bash scripts/deploy.sh qa ${{ env.DEPLOYMENT_ID }} # Call script

      - name: Get GQL Stack Outputs
        id: gql_outputs
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name webfg-gql-qa${{ env.DEPLOYMENT_ID }} --query 'Stacks[0].Outputs[?OutputKey==`GraphQLApiEndpoint`].OutputValue' --output text)
          API_KEY=$(aws cloudformation describe-stacks --stack-name webfg-gql-qa${{ env.DEPLOYMENT_ID }} --query 'Stacks[0].Outputs[?OutputKey==`GraphQLApiKey`].OutputValue' --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "api_key=$API_KEY" >> $GITHUB_OUTPUT

    outputs: # Define job outputs
      api_url: ${{ steps.gql_outputs.outputs.api_url }}
      api_key: ${{ steps.gql_outputs.outputs.api_key }}

  deploy-gm-app-qa:
    name: Deploy GM App to QA (PR-${{ github.event.number }})
    runs-on: ubuntu-latest
    needs: [deploy-gql-qa, test-gm-app-unit] # Wait for GQL deployment and GM App unit tests
    defaults:
      run:
        working-directory: ./webfg-gm-app
    env:
      DEPLOYMENT_ID: ${{ github.event.number }} # Use PR number as Deployment ID
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
        working-directory: . # Run at root

      - name: Install GM App dependencies
        run: npm install

      - name: Deploy GM App QA Stack (PR-${{ env.DEPLOYMENT_ID }})
        run: bash scripts/deploy.sh qa ${{ env.DEPLOYMENT_ID }}

  deploy-player-app-qa:
    name: Deploy Player App to QA (PR-${{ github.event.number }})
    runs-on: ubuntu-latest
    needs: [deploy-gql-qa, test-player-app-unit] # Wait for GQL deployment and Player App unit tests
    defaults:
      run:
        working-directory: ./webfg-player-app
    env:
      DEPLOYMENT_ID: ${{ github.event.number }} # Use PR number as Deployment ID
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
        working-directory: . # Run at root

      - name: Install Player App dependencies
        run: npm install

      - name: Deploy Player App QA Stack (PR-${{ env.DEPLOYMENT_ID }})
        run: bash scripts/deploy.sh qa ${{ env.DEPLOYMENT_ID }}

  add-pr-comments:
    name: Add App URLs to PR Comments
    runs-on: ubuntu-latest
    needs: [deploy-gm-app-qa, deploy-player-app-qa] # Wait for both app deployments
    env:
      DEPLOYMENT_ID: ${{ github.event.number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Construct App URLs
        id: construct_urls
        run: |
          echo "gm_app_url=https://webfg-gm-app-qa${{ env.DEPLOYMENT_ID }}.phnks.com" >> $GITHUB_OUTPUT
          echo "player_app_url=https://webfg-player-app-qa${{ env.DEPLOYMENT_ID }}.phnks.com" >> $GITHUB_OUTPUT

      - name: Check for existing URL comments
        id: check_comments
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PR_NUMBER: ${{ env.DEPLOYMENT_ID }}
          GM_APP_URL: ${{ steps.construct_urls.outputs.gm_app_url }}
          PLAYER_APP_URL: ${{ steps.construct_urls.outputs.player_app_url }}
        run: |
          echo "Checking for comments on PR $PR_NUMBER"
          existing_comments=$(gh pr view "$PR_NUMBER" --json comments --jq '.comments.[].body' || echo "")
          
          if echo "$existing_comments" | grep -Fxq "$GM_APP_URL"; then
            echo "gm_exists=true" >> $GITHUB_OUTPUT
          else
            echo "gm_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if echo "$existing_comments" | grep -Fxq "$PLAYER_APP_URL"; then
            echo "player_exists=true" >> $GITHUB_OUTPUT
          else
            echo "player_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Add GM App URL comment to PR
        if: steps.check_comments.outputs.gm_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PR_NUMBER: ${{ env.DEPLOYMENT_ID }}
          GM_APP_URL: ${{ steps.construct_urls.outputs.gm_app_url }}
        run: |
          echo "Adding GM App URL comment: $GM_APP_URL to PR $PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body "ðŸŽ® **GM App**: $GM_APP_URL"

      - name: Add Player App URL comment to PR
        if: steps.check_comments.outputs.player_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PR_NUMBER: ${{ env.DEPLOYMENT_ID }}
          PLAYER_APP_URL: ${{ steps.construct_urls.outputs.player_app_url }}
        run: |
          echo "Adding Player App URL comment: $PLAYER_APP_URL to PR $PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body "ðŸ‘¤ **Player App**: $PLAYER_APP_URL"

  run-cypress-tests:
    name: Run Cypress Tests on QA (Parallel)
    runs-on: ubuntu-latest
    needs: [deploy-gm-app-qa, deploy-player-app-qa] # Depends on both app deployments
    strategy:
      matrix:
        # Split tests into groups for parallel execution
        test-group: [1, 2, 3]
      fail-fast: false # Continue running other groups even if one fails
    defaults: # Set default working directory for steps in this job
      run:
        working-directory: ./webfg-gm-app
    env:
      # DEPLOYMENT_ID is already set at the workflow level or in previous jobs,
      # so it should be available here.
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs GITHUB_TOKEN for gh api
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent stable Node version

      - name: Install Dependencies
        run: npm ci # Use npm ci for clean install in CI environments
        # working-directory is set by defaults.run

      - name: Run Cypress Tests (Group ${{ matrix.test-group }})
        run: |
          # Set DEPLOYMENT_ID shell variable directly from github.event.number
          DEPLOYMENT_ID="${{ github.event.number }}"
          echo "Using Deployment ID (direct from event): $DEPLOYMENT_ID" # Debugging line
          
          # Run different test groups in parallel
          case "${{ matrix.test-group }}" in
            1)
              echo "Running CRUD tests..."
              CYPRESS_BASE_URL="https://webfg-gm-app-qa${DEPLOYMENT_ID}.phnks.com" npx cypress run --spec "cypress/e2e/*_crud*.cy.js" --headless --browser electron
              ;;
            2)
              echo "Running simple tests..."
              CYPRESS_BASE_URL="https://webfg-gm-app-qa${DEPLOYMENT_ID}.phnks.com" npx cypress run --spec "cypress/e2e/*_simple*.cy.js" --headless --browser electron
              ;;
            3)
              echo "Running other tests..."
              CYPRESS_BASE_URL="https://webfg-gm-app-qa${DEPLOYMENT_ID}.phnks.com" npx cypress run --spec "cypress/e2e/{home_page,search_filter_sort_pagination,*_flow,*_management,*_modal,*_grouping,*_associations}.cy.js" --headless --browser electron
              ;;
          esac
