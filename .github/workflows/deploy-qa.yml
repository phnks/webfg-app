name: Deploy QA Environment per PR

on:
  pull_request:
    types: [opened, synchronize, reopened] # Trigger on PR creation/update
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy-gql-qa:
    name: Deploy GQL to QA (PR-${{ github.event.number }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webfg-gql
    env:
      DEPLOYMENT_ID: ${{ github.event.number }} # Use PR number as Deployment ID
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
        working-directory: . # Run at root

      - name: Install GQL dependencies
        run: npm install

      - name: Deploy GQL QA Stack (PR-${{ env.DEPLOYMENT_ID }})
        id: deploy_gql
        run: bash scripts/deploy.sh qa ${{ env.DEPLOYMENT_ID }} # Call script

      - name: Get GQL Stack Outputs
        id: gql_outputs
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name webfg-gql-qa${{ env.DEPLOYMENT_ID }} --query 'Stacks[0].Outputs[?OutputKey==`GraphQLApiEndpoint`].OutputValue' --output text)
          API_KEY=$(aws cloudformation describe-stacks --stack-name webfg-gql-qa${{ env.DEPLOYMENT_ID }} --query 'Stacks[0].Outputs[?OutputKey==`GraphQLApiKey`].OutputValue' --output text)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "api_key=$API_KEY" >> $GITHUB_OUTPUT

    outputs: # Define job outputs
      api_url: ${{ steps.gql_outputs.outputs.api_url }}
      api_key: ${{ steps.gql_outputs.outputs.api_key }}

  deploy-gm-app-qa:
    name: Deploy GM App to QA (PR-${{ github.event.number }})
    runs-on: ubuntu-latest
    needs: deploy-gql-qa # Run after GQL deployment
    defaults:
      run:
        working-directory: ./webfg-gm-app
    env:
      DEPLOYMENT_ID: ${{ github.event.number }} # Use PR number as Deployment ID
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
        working-directory: . # Run at root

      - name: Install GM App dependencies
        run: npm install

      - name: Deploy GM App QA Stack (PR-${{ env.DEPLOYMENT_ID }})
        # Deploy script now uses the build artifacts created in the previous step
        run: bash scripts/deploy.sh qa ${{ env.DEPLOYMENT_ID }} # Call script

      - name: Construct GM App URL
        id: construct_url
        run: |
          echo "app_url=https://webfg-gm-app-qa${{ env.DEPLOYMENT_ID }}.phnks.com" >> $GITHUB_OUTPUT
        working-directory: . # Run at root to ensure GITHUB_OUTPUT path is correct relative to runner

      - name: Check for existing URL comment
        id: check_comment
        env:
          PR_NUMBER: ${{ env.DEPLOYMENT_ID }} 
          APP_URL: ${{ steps.construct_url.outputs.app_url }}
        run: |
          echo "Checking for comment: $APP_URL on PR $PR_NUMBER"
          # Fetch comments, allow empty result if no comments or PR not found initially (e.g. draft PRs)
          existing_comments=$(gh pr view "$PR_NUMBER" --json comments --jq '.comments.[].body' || echo "")
          if echo "$existing_comments" | grep -Fxq "$APP_URL"; then
            echo "INFO: Comment with URL '$APP_URL' already exists on PR #$PR_NUMBER."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "INFO: Comment with URL '$APP_URL' does not exist on PR #$PR_NUMBER. Will attempt to add."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: . # Run gh commands at repo root

      - name: Add GM App URL comment to PR
        if: steps.check_comment.outputs.exists == 'false'
        env:
          PR_NUMBER: ${{ env.DEPLOYMENT_ID }} 
          APP_URL: ${{ steps.construct_url.outputs.app_url }}
        run: |
          echo "Adding comment: $APP_URL to PR $PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body "$APP_URL"
        working-directory: . # Run gh commands at repo root

  run-cypress-tests:
    name: Run Cypress Tests on QA
    runs-on: ubuntu-latest
    needs: deploy-gm-app-qa # Depends on the GM App deployment job
    defaults: # Set default working directory for steps in this job
      run:
        working-directory: ./webfg-gm-app
    env:
      # DEPLOYMENT_ID is already set at the workflow level or in previous jobs,
      # so it should be available here.
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs GITHUB_TOKEN for gh api
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent stable Node version

      - name: Install Dependencies
        run: npm ci # Use npm ci for clean install in CI environments
        # working-directory is set by defaults.run

      - name: Run Cypress Tests
        run: |
          # Set DEPLOYMENT_ID shell variable directly from github.event.number
          DEPLOYMENT_ID="${{ github.event.number }}"
          echo "Using Deployment ID (direct from event): $DEPLOYMENT_ID" # Debugging line
          bash scripts/run-cypress.sh qa "$DEPLOYMENT_ID" # Pass the shell variable as argument
